plugins {
    id 'java'
    id 'application'
    id 'distribution'
    id 'com.diffplug.spotless' version '7.2.+'
    id 'net.ltgt.errorprone' version '4.3.+'
    id 'com.github.ben-manes.versions' version '0.52.+'  // Dependency update checker
}

group = 'edu.upenn.psych.memory'
version = '1.0.0'

// Project configuration
ext {
    programProperName = 'Penn TotalRecall'
    programShortName = 'TotalRecall'
    programExtensionlessFilename = 'PennTotalRecall'
    unixName = 'penntotalrecall'
    maintainerName = 'Lily Dayton'
    maintainerEmail = 'memory-software@psych.upenn.edu'
    uniqueIdentifier = 'edu.upenn.psych.memory.totalrecall'
    orgName = 'Computational Memory Lab, UPenn'
    homepage = 'http://memory.psych.upenn.edu/TotalRecall'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

application {
    mainClass = 'control.Start'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.java.dev.jna:jna:5.17.+'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.16.+'
    implementation('de.dfki.mary:marytts-signalproc:5.2.+') {
        exclude group: 'gov.nist.math', module: 'Jampack'
        exclude group: 'com.twmacinta', module: 'fast-md5'
    }
    
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.+'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.+'
    
    errorprone 'com.google.errorprone:error_prone_core:2.41.+'
}

// Using standard Gradle layout:
// src/main/java - main source
// src/main/resources - main resources  
// src/test/java - test source

// Configure JAR manifest
jar {
    archiveFileName = "${programExtensionlessFilename}.jar"
    manifest {
        attributes(
            'Main-Class': application.mainClass.get(),
            'Class-Path': '.',
            'Built-By': System.getProperty('user.name'),
            'Implementation-Vendor': orgName,
            'Implementation-Title': programProperName
        )
    }
    
    // Include all dependencies in the JAR (fat JAR)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Clean task
clean {
    delete 'classes', 'dist', 'tmp'
}

// No native compilation needed - using direct FMOD Core JNA binding

// Create minimal Java runtime with jlink
task createCustomRuntime {
    group = 'packaging'
    description = 'Create minimal Java runtime using jlink'
    
    doLast {
        def customRuntimeDir = file("${buildDir}/custom-runtime")
        
        // Delete existing runtime if it exists
        if (customRuntimeDir.exists()) {
            delete customRuntimeDir
        }
        
        exec {
            commandLine 'jlink',
                '--add-modules', 'java.base,java.desktop,java.logging,java.management,java.naming,java.prefs,java.xml',
                '--strip-debug',
                '--no-man-pages',
                '--no-header-files',
                '--compress=2',
                '--output', customRuntimeDir.absolutePath
        }
        
        println "Custom runtime created at ${customRuntimeDir}"
    }
}

// MacOS-only packaging

task packageMacApp {
    group = 'packaging'
    description = 'Create Mac .app bundle using jpackage (Java 14+)'
    dependsOn jar, createCustomRuntime
    
    doLast {
        def jarFile = jar.archiveFile.get().asFile
        def appDir = file("${buildDir}/mac")
        
        // Clean existing app bundle
        def appBundle = file("${appDir}/${programProperName}.app")
        if (appBundle.exists()) {
            delete appBundle
        }
        
        appDir.mkdirs()
        
        // Copy JAR to input directory
        def inputDir = file("${buildDir}/jpackage-input")
        inputDir.mkdirs()
        
        copy {
            from jarFile
            into inputDir
        }
        
        // Use jpackage (requires Java 14+)
        exec {
            commandLine 'jpackage',
                '--input', inputDir,
                '--main-jar', jarFile.name,
                '--main-class', application.mainClass.get(),
                '--name', programProperName,
                '--app-version', version,
                '--description', 'Audio annotation tool for research',
                '--vendor', orgName,
                '--mac-package-identifier', uniqueIdentifier,
                '--icon', 'deploy/mac/headphones.icns',
                '--dest', appDir,
                '--type', 'app-image',
                '--runtime-image', file("${buildDir}/custom-runtime").absolutePath
        }
        
        // Copy FMOD libraries to standard macOS .app location  
        def frameworksDir = file("${appBundle}/Contents/Frameworks")
        frameworksDir.mkdirs()
        
        copy {
            from 'native/fmod/lib/macos/libfmod.dylib'
            into frameworksDir
        }
        
        println "Mac .app created in ${appDir}"
    }
}


// Distribution configuration
distributions {
    main {
        distributionBaseName = programExtensionlessFilename
        contents {
            from jar
            from 'deploy/all'
            from('native/fmod/lib/macos') {
                into 'lib'
            }
        }
    }
}

// Test configuration
test {
    useJUnitPlatform()
    
    // Enable detailed test output
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
    }
    
    // Set up JNA library path for FMOD during testing
    systemProperty 'jna.library.path', 'native/fmod/lib/macos'
    
    // Custom test task that runs the manual test suite
    doLast {
        println "To run manual tests, execute: java -cp build/libs/${programExtensionlessFilename}.jar audio.tests.RunTests"
    }
}

// Version compatibility check
task checkJavaVersion {
    doLast {
        def javaVersion = JavaVersion.current()
        if (javaVersion < JavaVersion.VERSION_21) {
            throw new GradleException("Java 21 or higher is required. Current version: ${javaVersion}")
        }
        println "Java version check passed: ${javaVersion}"
    }
}

// Make version check run before compilation
compileJava.dependsOn checkJavaVersion

// Spotless code formatting configuration
spotless {
    java {
        target 'src/**/*.java'
        googleJavaFormat('1.22.0').aosp().reflowLongStrings()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}